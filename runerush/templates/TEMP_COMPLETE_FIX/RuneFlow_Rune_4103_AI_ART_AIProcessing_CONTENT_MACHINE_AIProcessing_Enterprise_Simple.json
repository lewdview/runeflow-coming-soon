{
  "name": "| AI Digital Art Factory",
  "nodes": [
    {
      "id": "RuneFlow-branding-note",
      "name": "🔥 RuneFlow Template",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1000,
        -500
      ],
      "parameters": {
        "color": 2,
        "width": 400,
        "height": 300,
        "content": "🔥 RuneFlow AUTOMATION TEMPLATE 🔥\\n🆔 Rune: 4103\\n\\n📋 Template: AI ART CONTENT MACHINE\\n📁 Category: AI & and & Research\\n👨‍💻 Created by: RuneFlow\\n📧 Contact: support@runeflow.xyz\\n🌐 Website: https://RuneFlow.xyz\\n📞 Support: \\n\\n⚡ automation mastery THROUGH AUTOMATION ⚡\\n\\n🎯 Need custom automation?\\nContact RuneFlow for enterprise solutions!\\n\\n🚀 Template Library: https://RuneFlow.xyz/templates"
      },
      "typeVersion": 1
    },
    {
      "id": "RuneFlow-branding-note",
      "name": "🔥 RuneFlow Template",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1000,
        -500
      ],
      "parameters": {
        "color": 2,
        "width": 400,
        "height": 300,
        "content": "🔥 RuneFlow AUTOMATION TEMPLATE 🔥\\n🆔 Rune: 4103\\n\\n📋 Template: AI ART CONTENT MACHINE\\n📁 Category: AI & and & Research\\n👨‍💻 Created by: RuneFlow\\n📧 Contact: support@runeflow.xyz\\n🌐 Website: https://RuneFlow.xyz\\n📞 Support: \\n\\n⚡ automation mastery THROUGH AUTOMATION ⚡\\n\\n🎯 Need custom automation?\\nContact RuneFlow for enterprise solutions!\\n\\n🚀 Template Library: https://RuneFlow.xyz/templates"
      },
      "typeVersion": 1
    },
    {
      "id": "RuneFlow-branding-note",
      "name": "🔥 RuneFlow Template",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1000,
        -500
      ],
      "parameters": {
        "color": 2,
        "width": 400,
        "height": 300,
        "content": "🔥 RuneFlow AUTOMATION TEMPLATE 🔥\\n🆔 Rune: 4103\\n\\n📋 Template: AI ART CONTENT MACHINE\\n📁 Category: AI & and & Research\\n👨‍💻 Created by: RuneFlow\\n📧 Contact: support@runeflow.xyz\\n🌐 Website: https://RuneFlow.xyz\\n📞 Support: \\n\\n⚡ automation mastery THROUGH AUTOMATION ⚡\\n\\n🎯 Need custom automation?\\nContact RuneFlow for enterprise solutions!\\n\\n🚀 Template Library: https://RuneFlow.xyz/templates"
      },
      "typeVersion": 1
    },
    {
      "id": "RuneFlow-branding-note",
      "name": "🔥 RuneFlow Template",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1000,
        -500
      ],
      "parameters": {
        "color": 2,
        "width": 400,
        "height": 300,
        "content": "🔥 RuneFlow AUTOMATION TEMPLATE 🔥\\n🆔 Rune: 4103\\n\\n📋 Template: AI ART CONTENT MACHINE\\n📁 Category: AI & and & Research\\n👨‍💻 Created by: RuneFlow\\n📧 Contact: support@runeflow.xyz\\n🌐 Website: https://RuneFlow.xyz\\n📞 Support: \\n\\n⚡ automation mastery THROUGH AUTOMATION ⚡\\n\\n🎯 Need custom automation?\\nContact RuneFlow for enterprise solutions!\\n\\n🚀 Template Library: https://RuneFlow.xyz/templates"
      },
      "typeVersion": 1
    },
    {
      "id": "RuneFlow-branding-note",
      "name": "🔥 RuneFlow Template",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1000,
        -500
      ],
      "parameters": {
        "color": 2,
        "width": 400,
        "height": 300,
        "content": "🔥 RuneFlow AUTOMATION TEMPLATE 🔥\\n🆔 Rune: 4103\\n\\n📋 Template: AI ART CONTENT MACHINE\\n📁 Category: AI & and & Research\\n👨‍💻 Created by: RuneFlow\\n📧 Contact: support@runeflow.xyz\\n🌐 Website: https://RuneFlow.xyz\\n📞 Support: \\n\\n⚡ automation mastery THROUGH AUTOMATION ⚡\\n\\n🎯 Need custom automation?\\nContact RuneFlow for enterprise solutions!\\n\\n🚀 Template Library: https://RuneFlow.xyz/templates"
      },
      "typeVersion": 1
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        100,
        0
      ],
      "id": "b6fa6ec8-ccf2-4228-bc94-37e706311927",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "Generate a visual style. ",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=style_target = \"anime characters\"\n\n***\n\nUse the Think tool to carefully generate your output.\n\nYou are an expert visual style generator for AI image creation. Your job is to create visual prompts for live AI wallpapers that showcase {style_target}. You do **not** describe the character directly. Your focus is to define the artistic and visual direction of the image.\n\nEach time you are called:\n- Randomly select one style from the curated list of style profiles below\n- If the selected style is \"Generate your own\", create a completely new and unique visual art direction not included in this list\n\nEach output must include:\n- A **title** (3–5 words, visual and original)\n- A **caption** (short, poetic, attention-grabbing; suitable for TikTok; give two hashtags)\n- A **style** (4-6 sentences describing the mood, environment, light, composition, and visual treatment, etc)\n\nIn addition, include the following **explicit metadata**:\n- `character_placement`: \"left\", \"center\", \"right\" and \"top\" or \"bottom\", etc\n- `character_size`: , character’s size vs the whole frame (\"tiny\", \"small\", \"medium\", \"large\") ; have a random chance that the landscape is the focus instead of the character\n- `character_facing`: \"facing forward\", \"facing back\", \"side profile\", \"over-the-shoulder\", \"cowboy shot\", \"distant figure\", etc. ; don't always have the character facing forward\n- `dimensionality`: \"2D\", \"3D\", etc\n- `art_profile`: descriptive art cue such as \"muted pastels\", \"brushstrokes\", \"vibrant color blocks\", etc.\n\nOutput one result in this format:\n```json\n{\n \"title\": \"\",\n \"caption\": \"\",\n \"style\": \"\",\n \"character_placement\": \"\",\n \"character_size\": \"\",\n \"character_facing\": \"\",\n \"dimensionality\": \"\",\n \"art_profile\": \"\"\n}\n\n\n***\nAvailable style pool (select one at random):\n1. Kid version of the character gazing at a world they will explore \n2. Silhouette stepping into a cascade of floating polygons \n3. Reflection in cracked ice revealing a parallel realm \n4. Fragmented portrait with cubist color planes \n5. **Art Style:** Vintage cel animation with posterized shadows \n6. Shadow puppet figures dancing on a stained-glass backdrop \n7. Minimalist line drawing expanding into a 3D wireframe \n8. Portrait overlayed with glitch art RGB split \n9. Silhouette filled with drifting calligraphic ink strokes \n10. Figure emerging from a bloom of fractal vines \n11. Broken mirror collage with mixed-media textures \n12. **Art Style:** Monochrome Sumi-e brushwork with negative space \n13. Floating geometric prisms forming an abstract landscape \n14. Photorealistic ray-marched fogbank behind a lone figure \n15. Layered papercut scene with visible edge shadows \n16. Neon-infused manga panel with halftone gradients \n17. Watercolor wash melting into digital pixel fragments \n18. Portrait carved in light using volumetric spotlights \n19. **Art Style:** 2.5D hybrid anime-realism with bloom effects \n20. Ink-splatter silhouette expanding into cosmic dust \n21. Silhouette reflected in rippling metal plate \n22. Character outline traced by glowing wireframe circuits \n23. Portrait blended with vintage newspaper collage \n24. **Art Style:** High-contrast chiaroscuro oil painting effect \n25. Figure walking on a Möbius-strip path through clouds \n26. Silhouette surrounded by floating origami diagrams \n27. Hyper-stylized cel-shaded scene with flat color blocks \n28. Portrait masked by swirling neon graffiti tags \n29. Miniature figure dwarfed by a kinetic typography storm \n30. **Art Style:** Soft pastel chalk on dark textured paper \n31. Fragmented digital mosaic revealing hidden glyphs \n32. Floating lanterns forming a spiral above a lone silhouette \n33. Figure dissolving into particle trails under spotlights \n34. Cut-paper diorama with exaggerated perspective lines \n35. **Art Style:** Photorealistic matte painting with atmospheric haze \n36. Portrait sketched in charcoal with smudged highlights \n37. Silhouette stepping through a portal of stained ink \n38. Figure framed by concentric metallic rings \n39. Portrait rendered in vector flat-design with long shadows \n40. **Art Style:** Retro 1980s sci-fi magazine cover illustration \n41. Abstract expressionist splash around a central void \n42. Figure traced in bioluminescent coral patterns \n43. Portrait built from looping magnetic tape reels \n44. Silhouette illuminated by shifting neon prisms \n45. **Art Style:** Gothic woodcut relief with deep carving lines \n46. Figure perched on a spiraling stack of floating books \n47. Portrait composed of overlapping water droplets \n48. **Art Style:** Cyberpunk vaporwave collage with lens flares \n49. **Art Style:** Hard-edged comic book ink with halftone shading \n50. Generate your own \n\n\n\n\nNote: Be cinematic, bold, and diverse. Combine visual ideas creatively and push artistic boundaries."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        220,
        0
      ],
      "id": "b93cf6d9-aa26-496b-a4b4-8ec6615605de",
      "name": "Style Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        440,
        -260
      ],
      "id": "c5de07f9-1b99-4c2c-839f-cdcd125227af",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "NyuhXI96tWK9dR2J",
          "name": "OpenAi account 4"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1,
      "position": [
        720,
        -260
      ],
      "id": "0a337606-f616-49d6-bc95-4e862ed6268c",
      "name": "Think"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n \"title\": \"\",\n \"caption\": \"\",\n \"style\": \"\",\n \"character_placement\": \"\",\n \"character_size\": \"\",\n \"character_facing\": \"\",\n \"dimensionality\": \"\",\n \"art_profile\": \"\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        320,
        -140
      ],
      "id": "5a3593b2-030c-46d5-bc96-be49b362db4a",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Generate 3 random {niche} characters with clothing and color details using the inclusion list.\n",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=niche = \"anime character\"\n\n***\nUse the Think Tool to think about your output\n\nYou are an expert character selector and descriptor for AI image generation. Your task is to generate **unique and recognizable characters** based on the defined niche: {niche}.\n\nYour steps to select them are as follows:\nStep 1: Think of three numbers from 1 to 50\nStep 2: Using those numbers. Find the characters matching them below. These are your final hcharacters. You must randomly select characters **only from the inclusion list** below. Characters in the exclusion list must never appear.\n\nInclusion list (example – user can edit):\n1. Monkey D. Luffy from One Piece \n2. Goku from Dragon Ball \n3. Gojo Satoru from Jujutsu Kaisen \n4. Levi Ackerman from Attack on Titan \n5. Tanjiro Kamado from Demon Slayer \n6. Zoro from One Piece \n7. Ichigo Kurosaki from Bleach \n8. Killua Zoldyck from Hunter x Hunter \n9. Eren Yeager from Attack on Titan \n10. Mikasa Ackerman from Attack on Titan \n11. Saitama from One Punch Man \n12. Vegeta from Dragon Ball \n13. Shinra Kusakabe from Fire Force \n14. Denji from Chainsaw Man \n15. Thorfinn from Vinland Saga \n16. Rengoku Kyojuro from Demon Slayer \n17. Asta from Black Clover \n18. Itachi Uchiha from Naruto \n19. Jinwoo Sung from Solo Leveling \n20. Maomao from The Apothecary Diaries \n21. Nami from One Piece \n22. Mitsuri from Demon Slayer \n23. Anya from Spy Family \n24. Yor from Spy Family \n25. Konata Izumi from Lucky Star \n26. Reg from Made in Abyss \n27. Chise Hatori from The Ancient Magus' Bride \n28. Kayo Hinazuki from ERASED \n29. Holo from Spice and Wolf \n30. Shouko Nishimiya from A Silent Voice \n31. Yukine from Noragami \n32. Shinobu Oshino from Bakemonogatari \n33. Yatora Yaguchi from Blue Period \n34. Reki Kyan from Yuru Camp \n35. Senku Ishigami from Dr. Stone \n36. Houtarou Oreki from Hyouka \n37. Fushi from To Your Eternity \n38. Taiga Aisaka from Toradora \n39. Kohta Hirano from Highschool of the Dead \n40. Violet Evergarden from Violet Evergarden\n41. Nina Einstein from Code Geass \n42. Bojji from Ousama Ranking \n43. Hanyuu from Higurashi When They Cry \n44. Kanna Kamui from Miss Kobayashi’s Dragon Maid \n45. Rakka from Haibane Renmei \n46. Mireille Bouquet from Noir \n47. Akihito Tsukasa from Parasyte: The Maxim \n48. Tomoe from Kamisama Kiss \n49. Momo Ayase from Dandadan\n50. Yuuri from Girls’ Last Tour \n\n\nExclusion list (example – user can edit):\n- Pikachu\n- Shrek\n- Peppa Pig\n- SpongeBob SquarePants\n\nEach selected character must include:\n- **name**: The full name of the character \n- **origin**: The show, game, or comic they come from \n- **clothing**: A brief, descriptive summary of their most iconic outfit \n- **color_scheme**: A single text string describing their dominant visual color theme (up to 3 colors)\n\n**Do not describe the character's story, mood, or appearance. Only clothing and color info.**\n\nOutput only the 5 randomly selected characters in the following JSON format:\n```json\n[\n {\n \"name\": \"\",\n \"origin\": \"\",\n \"clothing\": \"\",\n \"color_scheme\": \"\"\n },\n ...\n]\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        500,
        0
      ],
      "id": "c67f9edb-2d64-424a-b9d5-73807b820551",
      "name": "Character Agent"
    },
    {
      "parameters": {
        "jsonSchemaExample": "[\n {\n \"name\": \"Levi Ackerman\",\n \"origin\": \"Attack on Titan\",\n \"clothing\": \"Military-style jacket with vertical maneuver gear and green Survey Corps cape\",\n \"color_scheme\": \"green, brown, gray\"\n },\n {\n \"name\": \"Zoro\",\n \"origin\": \"One Piece\",\n \"clothing\": \"Green haramaki, long black coat with a red sash, and three swords\",\n \"color_scheme\": \"green, black, red\"\n },\n {\n \"name\": \"Tanjiro Kamado\",\n \"origin\": \"Demon Slayer\",\n \"clothing\": \"Checkered green-and-black haori over black Demon Slayer uniform\",\n \"color_scheme\": \"green, black, white\"\n }\n]"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        580,
        -140
      ],
      "id": "f79806bb-56fa-474f-b88a-f2bc91eaec07",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Combine the following visual style and character data into cinematic image prompts. Use each character from the list one by one. Integrate each character’s clothing and color scheme with the style description to produce five detailed, emotionally rich scenes. At the end of each, include a specs block with resolution, aspect ratio, and rendering quality.\n\n--- STYLE INPUT ---\nStyle Description: {{ $('Style Agent').item.json.output.style }}\nCharacter Placement:{{ $('Style Agent').item.json.output.character_placement }}\nCharacter Size:{{ $('Style Agent').item.json.output.character_size }}\nCharacter Facing:{{ $('Style Agent').item.json.output.character_facing }}\nDimensionality:{{ $('Style Agent').item.json.output.dimensionality }}\nArt Profile:{{ $('Style Agent').item.json.output.art_profile }}\n\n--- CHARACTERS INPUT ---\nCharacter 1:\nName: {{ $('Character Agent').item.json.output[0].name }}\nOrigin: {{ $('Character Agent').item.json.output[0].origin }}\nClothing: {{ $('Character Agent').item.json.output[0].clothing }}\nColor Scheme: {{ $('Character Agent').item.json.output[0].color_scheme }}\n\nCharacter 2:\nName: {{ $('Character Agent').item.json.output[1].name }}\nOrigin: {{ $('Character Agent').item.json.output[1].origin }}\nClothing: {{ $('Character Agent').item.json.output[1].clothing }}\nColor Scheme: {{ $('Character Agent').item.json.output[1].color_scheme }}\n\nCharacter 3:\nName: {{ $('Character Agent').item.json.output[2].name }}\nOrigin: {{ $('Character Agent').item.json.output[2].origin }}\nClothing: {{ $('Character Agent').item.json.output[2].clothing }}\nColor Scheme: {{ $('Character Agent').item.json.output[2].color_scheme }}\n",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are an expert prompt composer for AI image generation. Your role is to take two inputs:\n\nUse the Think tool to carefully structure your outputs.\n\nYou will be given: \n1. A single visual style description (from Agent 1) \n2. A list of characters (from Agent 2), each with: \n - Name \n - Origin \n - Typical clothing \n - Color scheme \n\nYour task is to generate three distinct cinematic image prompts, each using the same visual style, but featuring a different character from the list.\n\nEach prompt must evoke a cinematic key frame from a high-budget animated film or visual novel.\n\n---\n\nPrompt Construction Rules\n\nFor each prompt:\n\nCharacter Intro \n- Always introduce the character using this exact format in the first full sentence that mentions them: \n Character from Origin \n Examples: \n - Gojo Satoru from Jujutsu Kaisen \n - Levi Ackerman from Attack on Titan \n\nDescribe the Scene \n- Describe the character’s appearance, clothing, and color scheme in clear, vivid terms \n- Accurately reflect the visual style's setting, lighting, and tone \n- Clearly state: \n - Character position (left, center, or right) \n - Framing size (distant, full-body, medium shot, close-up, etc.) \n - Scene composition (foreground, background, motion, lighting effects) \n\nClarity & Fidelity \nTo ensure images do not appear low-resolution or vague: \n- Use concrete visual terms, not just poetic metaphors \n- Never use abstract sizing like “ten percent scale” — instead, specify the framing size (e.g. “small in frame but fully detailed”) \n- Reference the high resolution and detail within the prompt body, not only in the specs block (e.g. “each blade of grass sharply rendered in ultra-HD clarity”) \n- Ensure the character, even if distant, is described as highly detailed with defined features \n\nAvoid \n- Mentioning more than one character per prompt \n- Using double quotes anywhere in the prompt \n- Vague or purely poetic language without anchoring visual detail \n\n---\n\nSpecs Block (at end of each prompt) \nAfter each prompt, include the following exactly: \nResolution: 8K \nAspect Ratio: 9:16 (portrait) \nRendering: Ultra-detailed, high dynamic range \n\n---\n\nOutput Format \nReturn all prompts in the following JSON structure:\n```json\n[\n {\n \"final_prompt\": \"\"\n },\n {\n \"final_prompt\": \"\"\n },\n {\n \"final_prompt\": \"\"\n }\n]\n```"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        780,
        0
      ],
      "id": "e894dc82-c0e8-4eb7-91ba-6b05a378eab8",
      "name": "Final Prompt Agent"
    },
    {
      "parameters": {
        "jsonSchemaExample": "[\n {\n \"textToImagePrompt\": \"\"\n },\n {\n \"textToImagePrompt\": \"\"\n },\n {\n \"textToImagePrompt\": \"\"\n }\n]\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        860,
        -140
      ],
      "id": "2c3ff1df-f8bf-4cea-b7dc-ee0d5f31c156",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {
        "jsCode": "const prompts = $input.first().json.output;\n\nreturn prompts.map(p => ({\n json: {\n textToImagePrompt: p.textToImagePrompt.replace(/\\n/g, ' ')\n }\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        260,
        160
      ],
      "id": "5194e010-174f-433f-ae06-47dfbb6983d4",
      "name": "List"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/images/generations",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer (your api key here)"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n \"model\": \"gpt-image-1\",\n \"prompt\": \"Generate a high-quality image with this prompt: {{ $json.textToImagePrompt }}\",\n \"size\": \"1024x1536\",\n \"quality\": \"high\",\n \"moderation\": \"low\",\n \"output_format\": \"jpeg\",\n \"background\": \"opaque\",\n \"output_compression\": 50\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        380,
        160
      ],
      "id": "27094e84-d7ac-4742-a8e7-a99a2f3b86f5",
      "name": "Generate"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "data[0].b64_json",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        500,
        160
      ],
      "id": "a9a967ba-69df-4a5f-a5f6-97ccfe6f2d8d",
      "name": "Convert"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.imgur.com/3/image",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Client-ID (your client id here)"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "data",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        620,
        160
      ],
      "id": "75e6f801-e476-4f07-a8ae-0a90a149df18",
      "name": "Create URL"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://backend.blotato.com/v2/media",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "url",
              "value": "={{ $json.data.link }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        740,
        160
      ],
      "id": "80d0aa40-0250-46f3-82ae-75e0ab497cc8",
      "name": "Upload to Blotato",
      "credentials": {
        "httpHeaderAuth": {
          "id": "yXrumgwBmwqm0ipp",
          "name": "Blotato Credential course"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\n// Extract the `url` from each item\nconst mediaURLs = items.map(item => item.json.url);\n\n// Return a single item with the array named `mediaURLs`\nreturn [\n {\n json: {\n mediaURLs: mediaURLs\n }\n }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        860,
        160
      ],
      "id": "630aa9b2-a75c-40bf-9edc-e4ac94292db1",
      "name": "Combine"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1JiMGOmy9iukxaFNk4pOi4cAQfFTsvx-Tz6ueLWM8acM",
          "mode": "list",
          "cachedResultName": "[Tutorial] R31 | AI Digital Art Factory",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1JiMGOmy9iukxaFNk4pOi4cAQfFTsvx-Tz6ueLWM8acM/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1JiMGOmy9iukxaFNk4pOi4cAQfFTsvx-Tz6ueLWM8acM/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "imageURL_1": "={{ $json.mediaURLs[0] }}",
            "imageURL_2": "={{ $json.mediaURLs[1] }}",
            "imageURL_3": "={{ $json.mediaURLs[2] }}",
            "title": "={{ $('Style Agent').first().json.output.title }}",
            "caption": "={{ $('Style Agent').first().json.output.caption }}",
            "date_published": "={{ new Date().toISOString().split('T')[0] }}",
            "id": "==ROW()-1"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "caption",
              "displayName": "caption",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "imageURL_1",
              "displayName": "imageURL_1",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "imageURL_2",
              "displayName": "imageURL_2",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "imageURL_3",
              "displayName": "imageURL_3",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "date_published",
              "displayName": "date_published",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        500,
        320
      ],
      "id": "0b680ca6-2d18-47bb-bcc1-7291ffb5f874",
      "name": "Google Sheets",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "WmDBwEhcrLeG9D67",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://backend.blotato.com/v2/posts",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n \"post\": {\n \"target\": {\n \"targetType\": \"tiktok\",\n \"isYourBrand\": false,\n \"disabledDuet\": false,\n \"privacyLevel\": \"PUBLIC_TO_EVERYONE\",\n \"isAiGenerated\": true,\n \"disabledStitch\": false,\n \"disabledComments\": false,\n \"isBrandedContent\": false,\n \"autoAddMusic\": true \n },\n \"content\": {\n \"text\": \"{{ $('Style Agent').first().json.output.caption }}\",\n \"platform\": \"tiktok\",\n \"mediaUrls\": [\"{{ $json.imageURL_1 }}\", \"{{ $json.imageURL_2 }}\", \"{{ $json.imageURL_3 }}\"]\n },\n \"accountId\": \"123\"\n }\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        620,
        320
      ],
      "id": "1aa5c4c0-5c9b-4097-b8f3-09bc3893aa10",
      "name": "Tiktok",
      "credentials": {
        "httpHeaderAuth": {
          "id": "yXrumgwBmwqm0ipp",
          "name": "Blotato Credential course"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://backend.blotato.com/v2/posts",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "blotato-api-key",
              "value": "=your-api-key-here"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n \"post\": {\n \"target\": {\n \"targetType\": \"facebook\",\n \"pageId\": \" \n },\n \"content\": {\n \"text\": \" \",\n \"platform\": \"facebook\",\n \"mediaUrls\": {{ $json.item.imageUrls.toJsonString() }}\n },\n \"accountId\": \" \"\n }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        680,
        500
      ],
      "id": "b2890fc8-19e4-4e72-a2cd-82f2de9f1213",
      "name": "Facebook",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://backend.blotato.com/v2/posts",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "blotato-api-key",
              "value": "=your-api-key-here"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n \"post\": {\n \"target\": {\n \"targetType\": \"threads\"\n },\n \"content\": {\n \"text\": \" \",\n \"platform\": \"threads\",\n \"mediaUrls\": {{ $json.item.imageUrls.slice(0, 1).toJsonString() }},\n \"additionalPosts\": {{ $json.item.imageUrls.slice(1).map((url, i) => ({ text: \"\", mediaUrls: [url] })).toJsonString() }}\n },\n \"accountId\": \" \"\n }\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        800,
        500
      ],
      "id": "be646fd5-7756-437a-a94c-9286cffea5fd",
      "name": "Threads",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://backend.blotato.com/v2/posts",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "blotato-api-key",
              "value": "=your-api-key-here"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n \"post\": {\n \"target\": {\n \"targetType\": \"instagram\"\n },\n \"content\": {\n \"text\": \" \",\n \"platform\": \"instagram\",\n \"mediaUrls\": \" \"\n },\n \"accountId\": \" \"\n }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        320,
        500
      ],
      "id": "0aa0f293-a6cd-4910-9527-70aae1194d40",
      "name": "Instagram",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://backend.blotato.com/v2/posts",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "blotato-api-key",
              "value": "=your-api-key-here"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n \"post\": {\n \"target\": {\n \"targetType\": \"pinterest\",\n \"boardId\": \" \"\n },\n \"content\": {\n \"text\": \" \" \",\n \"platform\": \"pinterest\",\n \"mediaUrls\": \" \"\n },\n \"accountId\": \" \"\n }\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        440,
        500
      ],
      "id": "1cb556a7-2886-4f14-ab35-115cfffa7d5b",
      "name": "Pinterest",
      "disabled": true
    },
    {
      "parameters": {
        "content": "## STEP 1: Generate Prompts",
        "height": 100,
        "width": 440,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -360,
        0
      ],
      "id": "a23424cf-1b1e-4813-b17e-7599ff3a3198",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## STEP 2: Generate Images",
        "height": 100,
        "width": 440
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -200,
        160
      ],
      "id": "dd4f6bab-b6ce-45a1-922c-0f152dd3a2e1",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## STEP 3: Publish Images",
        "height": 100,
        "width": 440,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        40,
        320
      ],
      "id": "53c4f02a-28c7-43dc-9d87-e9b251585f96",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://backend.blotato.com/v2/posts",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "blotato-api-key",
              "value": "=your-api-key-here"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n \"post\": {\n \"target\": {\n \"targetType\": \"twitter\"\n },\n \"content\": {\n \"text\": \" \" \n \"platform\": \"twitter\",\n \"mediaUrls\": \" \",\n \"additionalPosts\": \" \" \n },\n \"accountId\": \" \"\n }\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        560,
        500
      ],
      "id": "661d90e6-8166-4232-88bb-3ceb4ec6e4ab",
      "name": "Twitter",
      "disabled": true
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Style Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Style Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Character Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Final Prompt Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "Style Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Character Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Final Prompt Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Style Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Style Agent": {
      "main": [
        [
          {
            "node": "Character Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Character Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Character Agent": {
      "main": [
        [
          {
            "node": "Final Prompt Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "Final Prompt Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Final Prompt Agent": {
      "main": [
        [
          {
            "node": "List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List": {
      "main": [
        [
          {
            "node": "Generate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate": {
      "main": [
        [
          {
            "node": "Convert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert": {
      "main": [
        [
          {
            "node": "Create URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create URL": {
      "main": [
        [
          {
            "node": "Upload to Blotato",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload to Blotato": {
      "main": [
        [
          {
            "node": "Combine",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine": {
      "main": [
        [
          {
            "node": "Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets": {
      "main": [
        [
          {
            "node": "Tiktok",
            "type": "main",
            "index": 0
          },
          {
            "node": "Instagram",
            "type": "main",
            "index": 0
          },
          {
            "node": "Pinterest",
            "type": "main",
            "index": 0
          },
          {
            "node": "Twitter",
            "type": "main",
            "index": 0
          },
          {
            "node": "Facebook",
            "type": "main",
            "index": 0
          },
          {
            "node": "Threads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tiktok": {
      "main": [
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "aea91d01-d9f5-4743-9ca2-96589d366299",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "addaa68bf5af965c06c3765c811549851eb65db8df4677e0c6253726ffcac493",
    "RuneFlow": {
      "provider": "RuneFlow - Norse Automation Mastery",
      "contact": "support@runeflow.xyz",
      "website": "https://RuneFlow.xyz",
      "support": "",
      "category": "AI & and & Research",
      "template_name": "AI ART CONTENT MACHINE",
      "rune_number": "4103"
    }
  },
  "id": "UIckDCrzkkNbQSIg",
  "tags": [],
  "runeflow_category": "ᚨᛁ AI & Research",
  "runeflow_description": "Intelligent Data Processing",
  "runeflow_contact": "contact@RuneFlow.xyz",
  "runeflow_website": "https://RuneFlow.xyz",
  "runeflow_tagline": "Unlock the Power of Ancient Wisdom Through Modern Automation",
  "runeflow_rune": "4103"
}