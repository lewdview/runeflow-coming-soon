const express = require('express');\nconst path = require('path');\nconst fs = require('fs').promises;\nconst TemplateService = require('../services/templateService');\n\nclass DailyTemplateRoutes {\n    constructor(database) {\n        this.db = database;\n        this.templateService = new TemplateService(database);\n        this.router = express.Router();\n        this.setupRoutes();\n    }\n\n    setupRoutes() {\n        // Route to access daily template by token\n        this.router.get('/daily/:token', this.getDailyTemplate.bind(this));\n        \n        // Route to download template file\n        this.router.get('/daily/:token/download', this.downloadTemplate.bind(this));\n        \n        // Route to get template info (without downloading)\n        this.router.get('/daily/:token/info', this.getTemplateInfo.bind(this));\n        \n        // Admin route to get today's template status\n        this.router.get('/admin/today', this.getTodayStatus.bind(this));\n        \n        // Admin route to trigger manual posting\n        this.router.post('/admin/post', this.manualPost.bind(this));\n    }\n\n    /**\n     * Get daily template page\n     */\n    async getDailyTemplate(req, res) {\n        try {\n            const { token } = req.params;\n            \n            // Validate token and get template\n            const templateData = await this.templateService.getTemplateByToken(token);\n            \n            if (!templateData) {\n                return res.status(404).render('daily-expired', {\n                    title: 'Template Expired',\n                    message: 'This daily template has expired or is invalid.'\n                });\n            }\n\n            // Render template page\n            res.render('daily-template', {\n                title: `Daily Template: ${templateData.template_name}`,\n                template: templateData,\n                downloadUrl: `/daily/${token}/download`,\n                expiresAt: new Date(templateData.access_expires_at).toLocaleString()\n            });\n            \n        } catch (error) {\n            console.error('Error getting daily template:', error);\n            res.status(500).render('error', {\n                title: 'Error',\n                message: 'An error occurred while loading the template.'\n            });\n        }\n    }\n\n    /**\n     * Download template file\n     */\n    async downloadTemplate(req, res) {\n        try {\n            const { token } = req.params;\n            \n            // Validate token and get template\n            const templateData = await this.templateService.getTemplateByToken(token);\n            \n            if (!templateData) {\n                return res.status(404).json({\n                    success: false,\n                    message: 'Template token is invalid or expired'\n                });\n            }\n\n            // Check download limits\n            if (templateData.downloads_count >= templateData.max_downloads) {\n                return res.status(429).json({\n                    success: false,\n                    message: 'Download limit reached for this template'\n                });\n            }\n\n            // Find template file\n            const templateFile = await this.findTemplateFile(templateData.template_id);\n            \n            if (!templateFile) {\n                return res.status(404).json({\n                    success: false,\n                    message: 'Template file not found'\n                });\n            }\n\n            // Increment download count\n            await this.templateService.incrementDownloadCount(token);\n\n            // Set download headers\n            const filename = `${templateData.template_name.replace(/[^a-zA-Z0-9]/g, '_')}.json`;\n            res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n            res.setHeader('Content-Type', 'application/json');\n\n            // Stream the file\n            res.sendFile(templateFile);\n            \n            console.log(`ðŸ“¥ Template downloaded: ${templateData.template_name} (${templateData.downloads_count + 1} downloads)`);\n            \n        } catch (error) {\n            console.error('Error downloading template:', error);\n            res.status(500).json({\n                success: false,\n                message: 'An error occurred while downloading the template'\n            });\n        }\n    }\n\n    /**\n     * Get template info without downloading\n     */\n    async getTemplateInfo(req, res) {\n        try {\n            const { token } = req.params;\n            \n            const templateData = await this.templateService.getTemplateByToken(token);\n            \n            if (!templateData) {\n                return res.status(404).json({\n                    success: false,\n                    message: 'Template token is invalid or expired'\n                });\n            }\n\n            res.json({\n                success: true,\n                template: {\n                    name: templateData.template_name,\n                    category: templateData.template_category,\n                    nodes_count: templateData.nodes_count,\n                    quality_score: templateData.quality_score,\n                    downloads_count: templateData.downloads_count,\n                    max_downloads: templateData.max_downloads,\n                    expires_at: templateData.access_expires_at\n                }\n            });\n            \n        } catch (error) {\n            console.error('Error getting template info:', error);\n            res.status(500).json({\n                success: false,\n                message: 'An error occurred while getting template info'\n            });\n        }\n    }\n\n    /**\n     * Find template file on disk\n     */\n    async findTemplateFile(templateId) {\n        const possiblePaths = [\n            path.join(__dirname, '../../templates/complete', `${templateId}.json`),\n            path.join(__dirname, '../../templates/RUNERUSH_COMPLETE_VAULT', `${templateId}.json`),\n            path.join(__dirname, '../../templates/processed_complete_vault', `${templateId}.json`),\n            path.join(__dirname, '../../templates/runeflow_core_collection', `${templateId}.json`),\n            path.join(__dirname, '../../templates/runeflow_pro_collection', `${templateId}.json`)\n        ];\n\n        for (const filePath of possiblePaths) {\n            try {\n                await fs.access(filePath);\n                return filePath;\n            } catch (error) {\n                // File doesn't exist, continue searching\n                continue;\n            }\n        }\n\n        console.error(`Template file not found for ID: ${templateId}`);\n        return null;\n    }\n\n    /**\n     * Get today's template status (admin)\n     */\n    async getTodayStatus(req, res) {\n        try {\n            // Simple authentication check (you might want to improve this)\n            const adminKey = req.query.key;\n            if (adminKey !== process.env.ADMIN_KEY) {\n                return res.status(401).json({\n                    success: false,\n                    message: 'Unauthorized'\n                });\n            }\n\n            const today = new Date().toISOString().split('T')[0];\n            const todayTemplate = await this.db.query(`\n                SELECT dt.*, tat.downloads_count, tat.max_downloads\n                FROM daily_templates dt\n                LEFT JOIN template_access_tokens tat ON dt.id = tat.daily_template_id\n                WHERE dt.post_date = $1\n            `, [today]);\n\n            if (todayTemplate.rows.length === 0) {\n                return res.json({\n                    success: true,\n                    posted: false,\n                    message: 'No template posted today yet'\n                });\n            }\n\n            const template = todayTemplate.rows[0];\n            res.json({\n                success: true,\n                posted: true,\n                template: {\n                    name: template.template_name,\n                    category: template.template_category,\n                    tweet_id: template.tweet_id,\n                    access_token: template.access_token,\n                    downloads: template.downloads_count || 0,\n                    max_downloads: template.max_downloads || 100,\n                    expires_at: template.access_expires_at,\n                    views: template.views_count || 0,\n                    likes: template.likes_count || 0,\n                    retweets: template.retweets_count || 0\n                }\n            });\n            \n        } catch (error) {\n            console.error('Error getting today status:', error);\n            res.status(500).json({\n                success: false,\n                message: 'An error occurred'\n            });\n        }\n    }\n\n    /**\n     * Manually trigger template posting (admin)\n     */\n    async manualPost(req, res) {\n        try {\n            // Simple authentication check\n            const adminKey = req.body.key || req.query.key;\n            if (adminKey !== process.env.ADMIN_KEY) {\n                return res.status(401).json({\n                    success: false,\n                    message: 'Unauthorized'\n                });\n            }\n\n            // This would need access to the TwitterBotController\n            // For now, just return a placeholder response\n            res.json({\n                success: true,\n                message: 'Manual posting triggered (implement TwitterBotController integration)'\n            });\n            \n        } catch (error) {\n            console.error('Error triggering manual post:', error);\n            res.status(500).json({\n                success: false,\n                message: 'An error occurred'\n            });\n        }\n    }\n\n    getRouter() {\n        return this.router;\n    }\n}\n\nmodule.exports = DailyTemplateRoutes;"
