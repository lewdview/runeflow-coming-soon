/**\n * Example integration code for your existing server.js\n * Add this code to your main server file after database setup\n */\n\nconst TwitterBotIntegration = require('./twitter-bot');\n\n// Add this after your database connection is established\n// and your Express app is set up\n\nclass ServerWithTwitterBot {\n    constructor() {\n        this.twitterBot = null;\n    }\n\n    async initializeTwitterBot(database, app) {\n        try {\n            console.log('🤖 Setting up Twitter Bot integration...');\n            \n            // Create the Twitter bot integration\n            this.twitterBot = new TwitterBotIntegration(database, app);\n            \n            // Initialize the bot (this sets up the database tables,\n            // starts the schedulers, and sets up routes)\n            const result = await this.twitterBot.initialize();\n            \n            if (result.success) {\n                console.log('✅ Twitter Bot is now running!');\n                console.log('   - Daily posts scheduled for 10:00 AM UTC');\n                console.log('   - Template access routes available at /daily/:token');\n                console.log('   - Admin controls at /bot/status and /bot/trigger');\n                return true;\n            } else {\n                console.error('❌ Twitter Bot failed to start:', result.error);\n                return false;\n            }\n        } catch (error) {\n            console.error('❌ Twitter Bot initialization error:', error);\n            return false;\n        }\n    }\n\n    // Add this to your graceful shutdown process\n    async shutdown() {\n        if (this.twitterBot) {\n            console.log('🛑 Stopping Twitter Bot...');\n            this.twitterBot.stop();\n        }\n    }\n}\n\n// Example usage in your server.js:\n/*\nconst express = require('express');\nconst { Pool } = require('pg');\nrequire('dotenv').config();\n\nconst app = express();\nconst serverWithBot = new ServerWithTwitterBot();\n\n// Your existing database setup\nconst database = new Pool({\n    connectionString: process.env.DATABASE_URL,\n    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false\n});\n\n// Your existing middleware and routes\napp.use(express.json());\napp.use(express.static('public'));\n// ... your other routes ...\n\n// Start server\nconst PORT = process.env.PORT || 8080;\napp.listen(PORT, async () => {\n    console.log(`🚀 Server running on port ${PORT}`);\n    \n    // Initialize Twitter Bot after server starts\n    const botStarted = await serverWithBot.initializeTwitterBot(database, app);\n    \n    if (botStarted) {\n        console.log('🎉 Server with Twitter Bot is fully operational!');\n    } else {\n        console.log('⚠️  Server started but Twitter Bot is disabled');\n    }\n});\n\n// Graceful shutdown\nprocess.on('SIGINT', async () => {\n    console.log('\\n🛑 Shutting down gracefully...');\n    await serverWithBot.shutdown();\n    await database.end();\n    process.exit(0);\n});\n*/\n\nmodule.exports = ServerWithTwitterBot;"
