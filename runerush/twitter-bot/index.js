const TwitterBotController = require('./controllers/twitterBotController');\nconst DailyTemplateRoutes = require('./routes/dailyTemplates');\n\nclass TwitterBotIntegration {\n    constructor(database, app) {\n        this.db = database;\n        this.app = app;\n        this.botController = new TwitterBotController(database);\n        this.routes = new DailyTemplateRoutes(database);\n    }\n\n    /**\n     * Initialize the Twitter bot system\n     */\n    async initialize() {\n        try {\n            console.log('🤖 Initializing Twitter Bot Integration...');\n            \n            // Initialize the bot controller\n            const result = await this.botController.initialize();\n            \n            if (!result.success) {\n                console.error('❌ Twitter Bot initialization failed:', result.error);\n                return result;\n            }\n\n            // Setup routes\n            this.setupRoutes();\n            \n            console.log('✅ Twitter Bot Integration initialized successfully!');\n            return { success: true };\n            \n        } catch (error) {\n            console.error('❌ Twitter Bot Integration failed:', error);\n            return { success: false, error: error.message };\n        }\n    }\n\n    /**\n     * Setup Express routes\n     */\n    setupRoutes() {\n        // Mount daily template routes\n        this.app.use('/', this.routes.getRouter());\n        \n        // Bot management routes\n        this.app.get('/bot/status', async (req, res) => {\n            try {\n                const status = await this.botController.getStatus();\n                res.json(status);\n            } catch (error) {\n                res.status(500).json({ success: false, error: error.message });\n            }\n        });\n\n        this.app.post('/bot/trigger', async (req, res) => {\n            try {\n                // Simple admin authentication\n                if (req.body.key !== process.env.ADMIN_KEY) {\n                    return res.status(401).json({ success: false, message: 'Unauthorized' });\n                }\n                \n                const result = await this.botController.triggerDailyPost();\n                res.json(result);\n            } catch (error) {\n                res.status(500).json({ success: false, error: error.message });\n            }\n        });\n\n        this.app.post('/bot/cleanup', async (req, res) => {\n            try {\n                if (req.body.key !== process.env.ADMIN_KEY) {\n                    return res.status(401).json({ success: false, message: 'Unauthorized' });\n                }\n                \n                const result = await this.botController.cleanupExpiredTokens();\n                res.json(result);\n            } catch (error) {\n                res.status(500).json({ success: false, error: error.message });\n            }\n        });\n        \n        console.log('✅ Twitter Bot routes setup complete');\n    }\n\n    /**\n     * Get bot controller instance\n     */\n    getBotController() {\n        return this.botController;\n    }\n\n    /**\n     * Stop the bot\n     */\n    stop() {\n        this.botController.stop();\n    }\n}\n\nmodule.exports = TwitterBotIntegration;"
