const cron = require('node-cron');\nconst TwitterService = require('../services/twitterService');\nconst TemplateService = require('../services/templateService');\n\nclass TwitterBotController {\n    constructor(database) {\n        this.db = database;\n        this.twitterService = new TwitterService();\n        this.templateService = new TemplateService(database);\n        this.isRunning = false;\n    }\n\n    /**\n     * Initialize the Twitter bot\n     */\n    async initialize() {\n        try {\n            console.log('🚀 Initializing Twitter Bot...');\n            \n            // Test Twitter connection\n            const twitterTest = await this.twitterService.testConnection();\n            if (!twitterTest.success) {\n                throw new Error(`Twitter connection failed: ${twitterTest.error}`);\n            }\n            \n            // Initialize database tables\n            await this.initializeDatabase();\n            \n            // Initialize template queue\n            await this.templateService.initializeTemplateQueue();\n            \n            // Start the daily scheduler\n            this.startDailyScheduler();\n            \n            // Start cleanup scheduler\n            this.startCleanupScheduler();\n            \n            console.log('✅ Twitter Bot initialized successfully!');\n            return { success: true };\n        } catch (error) {\n            console.error('❌ Twitter Bot initialization failed:', error);\n            return { success: false, error: error.message };\n        }\n    }\n\n    /**\n     * Initialize database tables\n     */\n    async initializeDatabase() {\n        const fs = require('fs').promises;\n        const path = require('path');\n        \n        try {\n            const schemaPath = path.join(__dirname, '../models/schema.sql');\n            const schema = await fs.readFile(schemaPath, 'utf8');\n            \n            // Split schema into individual statements and execute\n            const statements = schema.split(';').filter(stmt => stmt.trim());\n            \n            for (const statement of statements) {\n                if (statement.trim()) {\n                    await this.db.query(statement.trim());\n                }\n            }\n            \n            console.log('✅ Database tables initialized');\n        } catch (error) {\n            console.error('Error initializing database:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Start the daily posting scheduler\n     */\n    startDailyScheduler() {\n        // Schedule daily posting at 10 AM UTC (adjust as needed)\n        const cronExpression = '0 10 * * *'; // 10:00 AM every day\n        \n        console.log('📅 Starting daily scheduler (10:00 AM UTC)...');\n        \n        cron.schedule(cronExpression, async () => {\n            if (!this.isRunning) {\n                await this.postDailyTemplate();\n            }\n        }, {\n            scheduled: true,\n            timezone: \"UTC\"\n        });\n        \n        console.log('✅ Daily scheduler started');\n    }\n\n    /**\n     * Start the cleanup scheduler (runs at midnight)\n     */\n    startCleanupScheduler() {\n        // Schedule cleanup at midnight UTC\n        const cronExpression = '0 0 * * *'; // Midnight every day\n        \n        console.log('🧹 Starting cleanup scheduler (00:00 AM UTC)...');\n        \n        cron.schedule(cronExpression, async () => {\n            await this.cleanupExpiredTokens();\n            await this.updateEngagementMetrics();\n        }, {\n            scheduled: true,\n            timezone: \"UTC\"\n        });\n        \n        console.log('✅ Cleanup scheduler started');\n    }\n\n    /**\n     * Post the daily template\n     */\n    async postDailyTemplate() {\n        if (this.isRunning) {\n            console.log('⏳ Daily posting already in progress, skipping...');\n            return;\n        }\n\n        this.isRunning = true;\n        \n        try {\n            console.log('📱 Starting daily template posting...');\n            \n            // Check if already posted today\n            const today = new Date().toISOString().split('T')[0];\n            const existingPost = await this.db.query(\n                'SELECT id FROM daily_templates WHERE post_date = $1',\n                [today]\n            );\n\n            if (existingPost.rows.length > 0) {\n                console.log('ℹ️ Template already posted today, skipping...');\n                return { success: true, message: 'Already posted today' };\n            }\n\n            // Select next template\n            const template = await this.templateService.selectNextTemplate();\n            if (!template) {\n                throw new Error('No templates available for posting');\n            }\n\n            // Generate access token\n            const accessToken = this.templateService.generateAccessToken();\n\n            // Post tweet\n            const tweetResult = await this.twitterService.postDailyTemplate(template, accessToken);\n            \n            if (!tweetResult.success) {\n                throw new Error(`Tweet posting failed: ${tweetResult.error}`);\n            }\n\n            console.log(`✅ Tweet posted successfully: ${tweetResult.tweetId}`);\n\n            // Create daily template record\n            const dailyTemplate = await this.templateService.createDailyTemplate(template, tweetResult);\n            \n            // Mark template as posted in queue\n            await this.templateService.markTemplateAsPosted(template.template_id);\n\n            console.log('🎉 Daily template posting completed successfully!');\n            \n            return {\n                success: true,\n                template: template.template_name,\n                tweetId: tweetResult.tweetId,\n                accessToken: dailyTemplate.accessToken,\n                expiresAt: dailyTemplate.expiresAt\n            };\n\n        } catch (error) {\n            console.error('❌ Error posting daily template:', error);\n            return { success: false, error: error.message };\n        } finally {\n            this.isRunning = false;\n        }\n    }\n\n    /**\n     * Manually trigger daily template posting (for testing)\n     */\n    async triggerDailyPost() {\n        console.log('🔧 Manually triggering daily post...');\n        return await this.postDailyTemplate();\n    }\n\n    /**\n     * Clean up expired tokens\n     */\n    async cleanupExpiredTokens() {\n        try {\n            console.log('🧹 Cleaning up expired tokens...');\n            const cleaned = await this.templateService.cleanupExpiredTokens();\n            console.log(`✅ Cleanup completed: ${cleaned} tokens cleaned`);\n            return { success: true, cleaned };\n        } catch (error) {\n            console.error('Error during cleanup:', error);\n            return { success: false, error: error.message };\n        }\n    }\n\n    /**\n     * Update engagement metrics for recent tweets\n     */\n    async updateEngagementMetrics() {\n        try {\n            console.log('📊 Updating engagement metrics...');\n            \n            // Get recent tweets that need metric updates\n            const recentTweets = await this.db.query(`\n                SELECT id, tweet_id, template_name \n                FROM daily_templates \n                WHERE tweet_id IS NOT NULL \n                AND post_date >= CURRENT_DATE - INTERVAL '7 days'\n                ORDER BY post_date DESC\n            `);\n\n            let updatedCount = 0;\n            \n            for (const tweet of recentTweets.rows) {\n                try {\n                    const metrics = await this.twitterService.getTweetMetrics(tweet.tweet_id);\n                    \n                    if (metrics.success) {\n                        await this.db.query(`\n                            UPDATE daily_templates \n                            SET \n                                views_count = $1,\n                                likes_count = $2,\n                                retweets_count = $3,\n                                updated_at = CURRENT_TIMESTAMP\n                            WHERE id = $4\n                        `, [\n                            metrics.metrics.impression_count || 0,\n                            metrics.metrics.like_count || 0,\n                            metrics.metrics.retweet_count || 0,\n                            tweet.id\n                        ]);\n                        \n                        updatedCount++;\n                    }\n                } catch (error) {\n                    console.error(`Error updating metrics for tweet ${tweet.tweet_id}:`, error);\n                }\n            }\n            \n            console.log(`✅ Updated metrics for ${updatedCount} tweets`);\n            return { success: true, updated: updatedCount };\n        } catch (error) {\n            console.error('Error updating engagement metrics:', error);\n            return { success: false, error: error.message };\n        }\n    }\n\n    /**\n     * Get bot status and statistics\n     */\n    async getStatus() {\n        try {\n            const stats = await this.templateService.getTemplateStats();\n            \n            // Get today's template if posted\n            const today = new Date().toISOString().split('T')[0];\n            const todayTemplate = await this.db.query(\n                'SELECT template_name, downloads_count, access_token FROM daily_templates WHERE post_date = $1',\n                [today]\n            );\n\n            // Get total templates in queue\n            const queueStats = await this.db.query(\n                'SELECT COUNT(*) as total, COUNT(*) FILTER (WHERE last_posted IS NULL) as never_posted FROM template_queue WHERE is_active = true'\n            );\n\n            return {\n                success: true,\n                isRunning: this.isRunning,\n                todayTemplate: todayTemplate.rows[0] || null,\n                stats: {\n                    ...stats,\n                    queue_total: parseInt(queueStats.rows[0].total),\n                    never_posted: parseInt(queueStats.rows[0].never_posted)\n                }\n            };\n        } catch (error) {\n            console.error('Error getting bot status:', error);\n            return { success: false, error: error.message };\n        }\n    }\n\n    /**\n     * Stop the bot (for maintenance)\n     */\n    stop() {\n        console.log('🛑 Stopping Twitter Bot...');\n        // Note: node-cron tasks will continue running, but daily posting will be skipped\n        this.isRunning = false;\n        console.log('✅ Twitter Bot stopped');\n    }\n}\n\nmodule.exports = TwitterBotController;"
