const { Client } = require('pg');\nrequire('dotenv').config({ path: '../../.env' });\n\nconst TwitterService = require('../services/twitterService');\nconst TemplateService = require('../services/templateService');\nconst TwitterBotController = require('../controllers/twitterBotController');\n\nclass BotTester {\n    constructor() {\n        // Setup database connection\n        this.db = new Client({\n            connectionString: process.env.DATABASE_URL,\n            ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false\n        });\n    }\n\n    async connect() {\n        try {\n            await this.db.connect();\n            console.log('✅ Database connected');\n        } catch (error) {\n            console.error('❌ Database connection failed:', error);\n            throw error;\n        }\n    }\n\n    async disconnect() {\n        await this.db.end();\n        console.log('✅ Database disconnected');\n    }\n\n    async testTwitterConnection() {\n        console.log('\\n🔍 Testing Twitter connection...');\n        const twitterService = new TwitterService();\n        const result = await twitterService.testConnection();\n        \n        if (result.success) {\n            console.log('✅ Twitter connection successful!');\n            console.log(`   Account: @${result.user.username}`);\n        } else {\n            console.error('❌ Twitter connection failed:', result.error);\n        }\n        \n        return result.success;\n    }\n\n    async testTemplateLoading() {\n        console.log('\\n🔍 Testing template loading...');\n        const templateService = new TemplateService(this.db);\n        \n        try {\n            const templates = await templateService.loadTemplates();\n            console.log(`✅ Loaded ${templates.length} templates successfully`);\n            \n            if (templates.length > 0) {\n                const sample = templates[0];\n                console.log(`   Sample template: ${sample.template_name}`);\n                console.log(`   Category: ${sample.category}`);\n                console.log(`   Nodes: ${sample.nodes_count}`);\n                console.log(`   Quality: ${sample.quality_score}`);\n            }\n            \n            return true;\n        } catch (error) {\n            console.error('❌ Template loading failed:', error);\n            return false;\n        }\n    }\n\n    async testTweetGeneration() {\n        console.log('\\n🔍 Testing tweet generation...');\n        const twitterService = new TwitterService();\n        const templateService = new TemplateService(this.db);\n        \n        try {\n            const templates = await templateService.loadTemplates();\n            if (templates.length === 0) {\n                console.error('❌ No templates available for testing');\n                return false;\n            }\n            \n            const sampleTemplate = templates[0];\n            const testToken = 'test123token456';\n            \n            const tweetText = twitterService.generateTweetText(sampleTemplate, testToken);\n            \n            console.log('✅ Tweet generation successful!');\n            console.log('   Generated tweet:');\n            console.log(`   ${tweetText}`);\n            console.log(`   Length: ${tweetText.length} characters`);\n            \n            if (tweetText.length > 280) {\n                console.warn('⚠️  Tweet exceeds 280 character limit!');\n            }\n            \n            return true;\n        } catch (error) {\n            console.error('❌ Tweet generation failed:', error);\n            return false;\n        }\n    }\n\n    async testDatabaseSchema() {\n        console.log('\\n🔍 Testing database schema...');\n        \n        try {\n            // Test if tables exist\n            const tables = ['daily_templates', 'template_access_tokens', 'template_queue', 'engagement_metrics'];\n            \n            for (const table of tables) {\n                const result = await this.db.query(`\n                    SELECT EXISTS (\n                        SELECT FROM information_schema.tables \n                        WHERE table_schema = 'public' \n                        AND table_name = $1\n                    )\n                `, [table]);\n                \n                if (result.rows[0].exists) {\n                    console.log(`✅ Table '${table}' exists`);\n                } else {\n                    console.error(`❌ Table '${table}' does not exist`);\n                    return false;\n                }\n            }\n            \n            console.log('✅ All database tables verified');\n            return true;\n        } catch (error) {\n            console.error('❌ Database schema test failed:', error);\n            return false;\n        }\n    }\n\n    async testFullBot() {\n        console.log('\\n🔍 Testing full bot initialization...');\n        \n        try {\n            const botController = new TwitterBotController(this.db);\n            const result = await botController.initialize();\n            \n            if (result.success) {\n                console.log('✅ Bot initialization successful!');\n                \n                // Get bot status\n                const status = await botController.getStatus();\n                if (status.success) {\n                    console.log('✅ Bot status retrieved:');\n                    console.log(`   Templates in queue: ${status.stats.queue_total}`);\n                    console.log(`   Never posted: ${status.stats.never_posted}`);\n                    \n                    if (status.todayTemplate) {\n                        console.log(`   Today's template: ${status.todayTemplate.template_name}`);\n                        console.log(`   Downloads: ${status.todayTemplate.downloads_count}`);\n                    } else {\n                        console.log('   No template posted today yet');\n                    }\n                }\n                \n                // Stop the bot to clean up\n                botController.stop();\n                \n                return true;\n            } else {\n                console.error('❌ Bot initialization failed:', result.error);\n                return false;\n            }\n        } catch (error) {\n            console.error('❌ Full bot test failed:', error);\n            return false;\n        }\n    }\n\n    async runAllTests() {\n        console.log('🚀 Starting Twitter Bot Tests...');\n        console.log('=====================================');\n        \n        let allPassed = true;\n        \n        try {\n            await this.connect();\n            \n            // Run individual tests\n            const tests = [\n                { name: 'Twitter Connection', fn: () => this.testTwitterConnection() },\n                { name: 'Template Loading', fn: () => this.testTemplateLoading() },\n                { name: 'Tweet Generation', fn: () => this.testTweetGeneration() },\n                { name: 'Database Schema', fn: () => this.testDatabaseSchema() },\n                { name: 'Full Bot', fn: () => this.testFullBot() }\n            ];\n            \n            for (const test of tests) {\n                const passed = await test.fn();\n                if (!passed) {\n                    allPassed = false;\n                    console.error(`❌ ${test.name} test failed`);\n                } else {\n                    console.log(`✅ ${test.name} test passed`);\n                }\n            }\n            \n        } finally {\n            await this.disconnect();\n        }\n        \n        console.log('\\n=====================================');\n        if (allPassed) {\n            console.log('🎉 All tests passed! Your Twitter bot is ready!');\n        } else {\n            console.error('❌ Some tests failed. Please fix the issues above.');\n        }\n        \n        return allPassed;\n    }\n}\n\n// Run tests if this file is executed directly\nif (require.main === module) {\n    const tester = new BotTester();\n    tester.runAllTests()\n        .then(success => {\n            process.exit(success ? 0 : 1);\n        })\n        .catch(error => {\n            console.error('Fatal error:', error);\n            process.exit(1);\n        });\n}\n\nmodule.exports = BotTester;"
